{
	"info": {
		"_postman_id": "9dcb80c4-5c02-4b15-9a3e-db25add9da35",
		"name": "PetalHealthHomework",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "localhost:3000/pokemons",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Success', function() {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemons",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemons"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/pokemons/pokemon_number/4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Success', function() {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().length).to.be.above(0);",
							"    pm.expect(pm.response.json()[0].name).to.be.equal(\"Charmander\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemons/pokemon_number/4",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemons",
						"pokemon_number",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/pokemons/pokemon_number/25",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This is the script for \"Tests\" for Postman test \"localhost:3000/pokemons/pokemon_number/25\"",
							"",
							"// This idempotent test does the following:",
							"// Get pikachu, update pikachu to make it legendary, and then make pikachu not legendary.",
							"",
							"const pikachu_pokemon_number = 25;",
							"",
							"const getPokemon = (pokemon_number, callback) => {",
							"  const postRequest = {",
							"    url: `http://localhost:3000/pokemons/pokemon_number/${pokemon_number}`,",
							"    method: 'GET'",
							"  };",
							"",
							"  pm.sendRequest(postRequest, callback);",
							"};",
							"",
							"const setLegendaryStatus = (pokemon_number, legendary, callback) => {",
							"  const postRequest = {",
							"    url: `http://localhost:3000/pokemons/${pokemon_number}`,",
							"    method: 'PUT',",
							"    header: {",
							"      'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"      mode: 'raw',",
							"      raw: JSON.stringify({ legendary: legendary })",
							"    }",
							"  };",
							"",
							"  pm.sendRequest(postRequest, callback);",
							"};",
							"",
							"const make_callback = (pokemon_name, expected_legendary, callback) => {",
							"  return (error, response) => {",
							"    console.log(\"This is a callback\");",
							"    console.log(response);",
							"    pm.expect(response.code).to.be.equal(200);",
							"    const jsonResponse = response.json();",
							"    pm.expect(jsonResponse.length).to.be.above(0);",
							"    const pokemon = jsonResponse[0];",
							"    pm.expect(pokemon.name).to.be.equal(pokemon_name);",
							"    const previousLegendary = pokemon.legendary;",
							"    pm.expect(previousLegendary).to.be.equal(expected_legendary);",
							"    const pokemon_id = pokemon.id;",
							"    callback(pokemon_id);",
							"  };",
							"};",
							"",
							"const testLegendaryConsequence = (error, response) => {",
							"  console.log(error ? error : response.json());",
							"  const after = (pokemon_id) => {",
							"    setLegendaryStatus(pokemon_id, false, (error, response) => undefined);",
							"  };",
							"  getPokemon(pikachu_pokemon_number, make_callback(\"Pikachu\", true, after));",
							"};",
							"",
							"pm.test('Success', function() {",
							"  const after = (pokemon_id) => {",
							"    setLegendaryStatus(pokemon_id, true, testLegendaryConsequence);",
							"  };",
							"  getPokemon(pikachu_pokemon_number, make_callback(\"Pikachu\", false, after));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemons/pokemon_number/25",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemons",
						"pokemon_number",
						"25"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/pokemons/pokemon_number/250",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This is the script for \"Tests\" for Postman test \"localhost:3000/pokemons/pokemon_number/250\"",
							"",
							"// This idempotent test does the following:",
							"// GET /pokemons/pokemon_number/:pokemon_number",
							"// DELETE /pokemons/:id",
							"// POST /pokemons",
							"// GET /pokemons/pokemon_number/:pokemon_number",
							"",
							"const hooh_pokemon_number = 250;",
							"",
							"pm.test('Success', () => {",
							"  const postRequest = {",
							"    url: `http://localhost:3000/pokemons/pokemon_number/${hooh_pokemon_number}`,",
							"    method: 'GET'",
							"  };",
							"",
							"  pm.sendRequest(postRequest, (error, response) => {",
							"    pm.expect(response.code).to.be.equal(200);",
							"    const jsonResponse = response.json();",
							"    pm.expect(jsonResponse.length).to.be.above(0);",
							"    const pokemon1 = jsonResponse[0];",
							"",
							"    const postRequest = {",
							"      url: `http://localhost:3000/pokemons/${pokemon1.id}`,",
							"      method: 'DELETE'",
							"    };",
							"",
							"    pm.sendRequest(postRequest, (error, response) => {",
							"      const postRequest = {",
							"        url: \"http://localhost:3000/pokemons\",",
							"        method: 'POST',",
							"        header: {",
							"          'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"          mode: 'raw',",
							"          raw: JSON.stringify(pokemon1)",
							"        }",
							"      };",
							"",
							"      pm.sendRequest(postRequest, (error, response) => {",
							"        const postRequest = {",
							"          url: `http://localhost:3000/pokemons/pokemon_number/${hooh_pokemon_number}`,",
							"          method: 'GET'",
							"        };",
							"",
							"        pm.sendRequest(postRequest, (error, response) => {",
							"          pm.expect(response.code).to.be.equal(200);",
							"          const jsonResponse = response.json();",
							"          pm.expect(jsonResponse.length).to.be.above(0);",
							"          const pokemon2 = jsonResponse[0];",
							"",
							"          pm.expect(pokemon1.pokemon_number).to.be.equal(pokemon2.pokemon_number);",
							"          pm.expect(pokemon1.id).to.not.be.equal(pokemon2.id);",
							"        })",
							"      });",
							"    });",
							"  });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemons/pokemon_number/250",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemons",
						"pokemon_number",
						"250"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/pokemons/page/1/per_page/33",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This is the script for \"Tests\" for Postman test \"localhost:3000/pokemons/page/1/per_page/33\"",
							"",
							"// This test first read every page of pokemons using",
							"//   GET /pokemons/page/:page/per_page/:per_page",
							"// Once all pages have been read, another list of pokemons is obtained using",
							"//   GET /pokemons",
							"// Finally, both lists are compared. The test passes if they are equal.",
							"",
							"pm.test('Success', () => {",
							"  let currentPage = 1;",
							"  const perPage = 33;",
							"  let paginatedPokemons = [];",
							"",
							"  const readPage = () => {",
							"    const postRequest = {",
							"      url: `http://localhost:3000/pokemons/page/${currentPage}/per_page/${perPage}`,",
							"      method: 'GET'",
							"    };",
							"",
							"    pm.sendRequest(postRequest, (error, response) => {",
							"      pm.expect(response.code).to.be.equal(200);",
							"      const jsonResponse = response.json();",
							"      pm.expect(jsonResponse.length).to.be.below(perPage + 1);",
							"      paginatedPokemons = paginatedPokemons.concat(jsonResponse);",
							"",
							"      if (jsonResponse.length == perPage) {",
							"        ++currentPage;",
							"        readPage();",
							"      } else {",
							"        // We are done reading pages.",
							"        // Now read all pokemons and compare both arrays.",
							"        const postRequest = {",
							"          url: `http://localhost:3000/pokemons`,",
							"          method: 'GET'",
							"        };",
							"",
							"        pm.sendRequest(postRequest, (error, response) => {",
							"          pm.expect(response.code).to.be.equal(200);",
							"          const allPokemons = response.json();",
							"",
							"          pm.expect(paginatedPokemons.length).to.be.equal(allPokemons.length);",
							"",
							"          for (let i = 0; i != paginatedPokemons.length; ++i) {",
							"            pm.expect(paginatedPokemons[i].pokemon_number).to.be.equal(allPokemons[i].pokemon_number);",
							"            pm.expect(paginatedPokemons[i].name).to.be.equal(allPokemons[i].name);",
							"          }",
							"        });",
							"      }",
							"    });",
							"  };",
							"  readPage();",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/pokemons/page/1/per_page/33",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"pokemons",
						"page",
						"1",
						"per_page",
						"33"
					]
				}
			},
			"response": []
		}
	]
}